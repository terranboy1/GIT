버전별 차이 보기( diff 이전커밋..최신커밋 이렇게 쳐야 보기 편한 것 같다.)
----------------------------------------------------------------
git log -p
git diff


커밋 되돌리기
----------------------------------------------------------------
git reset --hard "버전id"

커밋 되돌린걸 취소하기
----------------------------------------------------------------
git reflog
head 확인하고
git reset --hard head@{} 해당 head번호 하면 됨.(gisotry에선 .\ORIG_HEAD에 이 정보가 있음)


파일 복사하기
----------------------------------------------------------------
cp f1.txt f3.txt


gistory
----------------------------------------------------------------
☆git add의 원리☆

add했을 때 바뀌는 파일
index(작성했던 내용의 파일명과 파일내용으로 갈 수 있는 '주소'가 적혀있다.)
object/78/98214901240912~~~ 이런식. 작성했던 파일의 내용이 담겨있다.(파일의 이름은 index에 적혀있다.) 요거슬 오브젝트나 객체라 부릅니다.
index는 objects 파일을 가리키고 있따.


그리고 깃에서 중요한 내용인데 파일의 이름이 달라도 내용이 같으면 같은 오브젝트파일을 가리킨다.
cp f1.txt f3.txt 이렇게 복사하면 두 개의 파일이 같은 객체를 가리키게 됨.
그래서 아무리 많은 파일이 있다고 해도 내용이 같다면 같은 오브젝트를 가리키게 돼 중복을 제거할 수 있다.
그 말인즉슨, 버전관리를 하면서 여러 사람이 여러 파일을 만든다해도 중복을 제거할 수도 있다는 것.
그럼 이게 원리가 뭘까?
구글에 sha1 online 검색ㄱㄱ
이게 해시를 이용한건데 데이터 및 정보가 해쉬알고리즘을 통해 해시값(오브젝트 주소)을 얻어낼 수 있는데
먼저 objects 디렉토리를 만들고 그 후 해시값의 앞2자리를 이용해 하위 디렉토리를 만들고 나머지 값들에 정보를 저장한다(물론 다른 정보도 저장하겠지만).
object/78/98214901240912 이런식으로 말이다. 매커니즘이 이렇다.
그리고 index에 해시값을 적어놓는 것이지.
git add를 하면 이런식으로 처리함(우와 개꿀잼ㅋㅋ)

☆git commit의 원리☆
커밋을 하면 버전이 만들어지는데
이런 버전도 object/46/e4214821qwe124 이런식으로 add를 했을때와 동일한 방식으로 저장된다.
그래서 커밋도 내부적으로 객체라 볼 수 있다.
커밋을 하면 누가 커밋했는지에 대한 정보가 있고(git config --global user.name "네임" 이런거)
커밋의 내용이 있고, tree(해시값)가 있다. 
그리고 이전 커밋이 있다면 parent라는 이름과 해시값이 있다.(이전 커밋의 해시값이고 링크가 되어있다.)
그 트리를 클릭해보면 그 커밋에 해당하는, 우리가 작성한 버전의 파일들의 해시값들이 링크로 되어있다.
그리고 그것을 클릭하면 파일명과 내용이 나온다.
이 트리들은 각각의 커밋마다 값이 다르다.(버전이 다르니까 당연한거.)
잘 생각해보면, 각각의 버전마다 이런 트리가 있고 트리엔 파일의 이름과 내용이 있기 떄문에
우리는 버전에 적혀있는 트리를 통해 프로젝트 폴더에 대한 과거와 현재의 상태들을 알 수 있다.
정리좀하면, objects폴더가 가지고 있는 정보는 3개중에 하나다. commit, tree, blob(파일의내용)

☆git status의 원리☆
git status를 하면 커밋할 게 있는지 없는지가 뜬다.
어떻게 동작하는 걸까?
짐작컨대, 최신커밋과 index의 차이를 비교하는 것 같다.
최신 커밋의 tree를 보면 커밋할 시점의 각 파일들의 해시값들이 나오는데,
index에는 추가,수정,삭제한 파일들의 최신 이력이 남는다.
이것들을 비교해서 내용이 일치하지 않은 것들을
우리에게 수정됐다고 메시지를 띄워 알려준다.
그리고 잘 생각해보면 최신커밋과 현재 index가 가리키고있는 objects 파일의 내용이 다르다면
현재 무언가 파일이 추가,수정,삭제 되었고 그것이 add되어있다(커밋대기상태다.)는 것을 뜻한다.
(그리고 그게 커밋이 되면 또 최신 커밋이 생기겠지)
그리고 커밋을 하면 저장소와 index와 working copy가 일치하기 때문에 더이상 커밋할 게 없다고 띄운다.
